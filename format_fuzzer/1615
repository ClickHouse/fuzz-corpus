JSONColumnsWithMetadata
uid String, version UInt32, is_deleted UInt8)     ENGINE = ReplicatedReplacingMergeTree('/clickhouse/{database}/tables/test_cleanup/', 'r1', version, is_deleted)     ORDER BY uid;   INSERT INTO testCleanupR1 (*) VALUES ('d1', 1, 0),('d2', 1, 0),('d3', 1, 0),('d4', 1, 0); INSERT INTO testCleanupR1 (*) VALUES ('d3', 2, 1); INSERT INTO testCleanupR1 (*) VALUES ('d1', 2, 1); SYSTEM SYNC REPLICA testCleanupR1; -- Avoid "Cannot select parts for optimization: Entry for part all_2_2_0 hasn't been read from the replication log yet"  OPTIMIZE TABLE testCleanupR1 FINAL CLEANUP;  -- Only d3 to d5 remain SELECT '== (Replicas) Test optimize =='; SELECT * FROM testCleanupR1;  ------------------------------  DROP TABLE IF EXISTS testSettingsR1;  CREATE TABLE testSettingsR1 (col1 String, version UInt32, is_deleted UInt8)     ENGINE = ReplicatedReplacingMergeTree('/clickhouse/{database}/tables/test_setting/', 'r1', version, is_deleted)     ORDER BY col1     SETTINGS clean_deleted_rows = 'Always';  INSERT INTO testSettingsR1 (*) VALUES ('c1', 1, 1),('c2', 1, 0),('c3', 1, 1),('c4', 1, 0); SYSTEM SYNC REPLICA testSettingsR1; -- Avoid "Cannot select parts for optimization: Entry for part all_2_2_0 hasn't been read from the replication log yet"  OPTIMIZE TABLE testSettingsR1 FINAL;  -- Only d3 to d5 remain SELECT '== (Replicas) Test settings =='; SELECT * FROM testSettingsR1;   ------------------------------ -- Check errors DROP TABLE IF EXISTS test; CREATE TABLE test (uid String, version UInt32, is_deleted UInt8
2227
