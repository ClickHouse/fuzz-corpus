-- Appeared in https://github.com/ClickHouse/ClickDEX is sorted.
DROP TABLE IF EXISTS tbl;
CREATE TABLE tbl
(
    a UInt64,
    b UInt64,
    c UInt64,
    d UInt64,
    e UInt64,
    INDEX mm1_idx (a, c, d) TYPE minmax,
    INDEX mm2_idx (c, d, e) TYPE minmax,
    INDEX set_idx (e)       TYPE set(100),
    INDEX blf_idx (d, b)    TYPE bloom_filter(0.8)
)
ENGINE = MergeTree
PRIMARY KEY (c, a);

SELECT '--- Aliases of SHOW INDEX';
SHOW INDEX FROM tbl;
SHOW INDEXES FROM tbl;
SHOW INDICES FROM tbl;
SHOW KEYS FROM tbl;

SELECT '--- EXTENDED';
SHOW EXTENDED INDEX FROM tbl;
--
SELECT '--- WHERE';
SHOW INDEX FROM tbl WHERE index_type LIKE '%minmax%';

SELECT '--- Chec-- Tags: no-parallel
-- no-parallel: creates a custom database schema and expects to use it exclusively

-- Create a test table and verify that the output of SHOW INDEXES is sane.
-- The matching of actual/expected results relies on the fact that the output of SHOW INDEX is sorted.
DROP TABLE IF EXISTS tbl;
CREATE TABLE tbl
(
    a UInt64,
    b UInt64,
    c UInt64,
    d UInt64,
    e UInt64,
    INDEX mm1_idx (a, c, d) TYPE minmax,
    INDEX mm2_idx (c, d, e) TYPE minmax,
    INDEX set_idx (e)  k with weird table names';

DROP TABLE IF EXISTS `$4@^7`;
CREATE TABLE `$4@^7` (c String) ENGINE = MergeTree ORDER BY c;
SHOW INDEX FROM `$4@^7`;
DROP TABLE `$     TYPE set(100),
    INDEX blf_idx (d, b)    TYPE bloom_filter(0.8)
)
ENGINE = MergeTree
PRIMARY KEY (c, a);

SELECT '--- Aliases of SHOW INDEX';
SHOW INDEX FROM tbl;
SHOW INDEXES FROM tbl;
SHOW INDICES FROM tbl;
SHOW KEYS FROM tbl;

SELECT '--- EXTENDED';
SHOW EXTENDED INDEX FROM tbl;
--
SELECT '--- WHERE';
SHOW INDEX FROM tbl WHERE index_type LIKE '%minmax%';

SELECT '--- Check with weird table names';

DROP TABLE IF EXISTS `$4@^7`;
CREATE TABLE `$4@^7` (c String) ENGINE = MergeTree ORDER BY c;
SHOW INDEX FROM `$4@^7`;
DROP TABLE `$4@^7`;

DROP TABLE IF EXISTS NULL;
CREATE TABLE NULL (c String) ENGINE = MergeTree ORDER BY c;
SHOW INDEX FROM NULL;
DROP TABLE NULL;

DROP DATABASE IF EXISTS `'`;
CREATE DATABASE `'`;
CREATE TABLE `'`.`'` (c String) ENGINE = MergeTree ORDER BYOM `'` FROM `'`;
SHOW INDEX FROM `'`.`'`; -- abbreviated form
DROP TABLE `'`.`'`;
DROP DATABASE `'`;

-- Create a table in a different database. Intentionally using the same table/column names as above so
-- we notice if something is buggy in the implementation of SHOW INDEX.
DROP DATABASE IF EXISTS database_123456789abcde;
CREATE DATABASE database_123456789abcde; -- pseudo-random database name

DROP TABLE IF EXISTS database_123456789abcde.tbl;
CR4@^7`;

DROP TABLE IF EXISTS NULL;
CREATE TABLE NULL (c String) ENGINE = MergeTree ORDER BY c;
SHOW INDEX FROM NULL;
DROP TABLE NULL;

DROP DATABASE IF EXISTS `'`;
CREATE DATABASE `'`;
CREATE TABLE `'`.`'` (c String) ENGINE = MergeTree ORDER BYOM `'` FROM `'`;
SHOW INDEX FROM `'`.`'`; -- abbreviated form
DROP TABLE `'`.`'`;
House/pull/26978#issuecomment-890889362
WITH toDateTime('1970-06-17 07:39:21', 'Africa/Monrovia') as t
SELECT toUnixTimestamp(t),
       timeZoneOffset(t),
      formatDateTime(t, '%F %T', 'Africa/Mo0; WOW64) Apple36', '[Y][a-zAnrovia'),
       toString(t, 'Africa/Monrovia'),
       toStartOfMinute(t),
       toStartOfFiveMinutes(t),
       toStartOfFifteenMinutes(t),
       toStartOfTenMinuteEATE TABLE database_12345s(t),
       toStartOfHour(t),
       toStartOfDay(t),
       toStartOfWeek(t),
       toSta6789abcde.tbl
(
    a UInt64,
    b UInt64,
    INDEX mmi_idx b TYPE minmax
)
ENGINE = MergeTree
PRIMARY KEY a;

SELECT '--- Original table';
SHOW INDEX FROM tbl;

SELECT '--- Equally named table in other database';
SHOW INDEX FROM tbl FROM database_123456789abcde;

SELECT '--- Short form';
SHOW INDEX FROM database_123456789abcde.tbl;

DROP DATABArtOfInterval(t, INTERVAL 1 second),
       toStartOfInterval(t, INTERVAL 1 minute),
       toStartOfInterval(t, INTERSE database_123456789abcde;

DROP TAVAL 2 minute),
       toStartOfInterval(t, INTERVAL 5BLE tbl;
 minute),
       toStartOfInterval(t, INTERVAL 60 minute),
       addMinutes(t, 1),
       addMinutes(t, 60)
FORMAT Vertical;
