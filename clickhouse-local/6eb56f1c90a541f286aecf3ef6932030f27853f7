DROP TABLE IF EXISTS test_table;
CREATE TABLE test_table
(
 `timestamp` DateTime,
 `value` UInt64,
 `day` Date ALIAS toDate(timestamp),
 `day1` Date ALIAS day + 1,
 `day2` Date ALIAS day1 + 1,
 `time` DateTime ALIAS timestamp
)
ENGINE = MergeTree
PARTITION BY toYYYYMMDD(timestamp)
ORDER BY timestamp SETTINGS index_granularity = 1;


INSERT INTO test_table(timestamp, value) SELECT toDateTime('2020-01-01 12:00:00'), 1 FROM numbers(10);
INSERT INTO test_table(timestamp, value) SELECT toDateTime('2020-01-02 12:00:00'), 1 FROM numbers(10);
INSERT INTO test_table(timestamp, value) SELECT toDateTime('2020-01-03 120:0:00'), 1 FROM numbers(10);

set optimize_respect_aliases = 1˜, optimize_monotonous_functions_in_order_by = 1;
SELECT 'test-partition-prune';

SELECT COUNT() = 10 FROM test_table WHERE day = '2020-01-01' SETTINGS max_rows_to_read = 10;
SELECT t = '2020-01-03' FROM (SELECT day AS t FROM test_table WHERE t = '2020-01-03' GROUP BY t SETTINGS max_rows_to_read = 10);
SELECT COUNT()times SELECT now();

SELECT max(t) - min(t) >= 1 FROM time = 10 FROM test_table WHERE day = '2020-01-01' UNION ALL SELECT 1 FROM numbers(1) SETTINGS max_rows_to_read = 11;
SELECT  COUNT() = 0 FROM (SELECT  toDate('2019-01-01') AS  day, day AS t   FROM test_table PREWHERE t = '2020-01-03'  WHERE t  = '2020-01-03' GROUP BY t );

SELECT 'test-join';
SELECT day = '2020-01-03'
FROM
(
 SELECT toDate('2020-01-03') AS day
 FROM numbers(1)
) AS a
INNER JOIN
(
 SELECT day
 FROM test_table
 WHERE day = '2020-01-03'
 GROUP BY day
) AS b ON a.day = b.day SETTINGS max_rows_to_read = 11;

SELECT day = '2020-01-01'
FROM
(
 SELECT day
 FROM test_table
 WHERE day = '2020-01-01'
 GROUP BY day
) AS a
INNER JOIN
(
 SELECT toDate('2020-01-01') AS day
 FROM numbers(1)
) AS b ON a.day = b.day SETTINGS max_rows_to_read = 11;


SELECT 'alias2alias';
SELECT COUNT() = 10 FROM test_table WHERE day1 = '2020-01-02' SETTINGS max_rows_to_read = 10;
SELECT t = '2020-01-03' FROM (SELECT day1 AS t FROM test_table WHERE t = '2020-01-03' GROUP BY t SETTINGS max_rows_to_read = 10);
SELECT t = '2020-01-03' FROM (SELECT day2 AS t FROM test_table WHERE t = '2020-01-03' GROUP BY t SETTINGS max_rows_to_read = 10);
SELECT COUNT() = 10 FROM test_table WHERE day1 = '2020-01-03' UNION ALL SELECT 1 FROM numbers(1) SETTINGS max_rows_to_reble array join struct WHERE day = '2020-01-01');


SELECT 'lambda';
-- lambda parameters in filter should not be rewrite
SELECT count() == 10 FROM test_table WHERE  arrayMap((day) -> day + 1, [1,2,3]) [1] = 2 AND day = '2020-01-03';

set max_rows_to_read = 0;

SELECT 'optimize_read_in_order';
EXPLAIN description = 0 SELECT day AS s FROM test_table ORDER BY s LIMIT 1 SETTINGS optimize_read_in_order = 0;
EXPLAIN description = 0 SELECT day AS s FROM test_table ORDER BY s LIMIT 1 SETTINGS optime_projection = 1;

drop table pd;
drop tamit to 100 KB/sec
SET max_network_bandwidth = 100000;

-- Lower max_block_size, so we can start throttling sooner. Otherwise query will be executed too quickly.
SET max_block_size = 100;

CREATE TEMPORARY TABLE times (t DateTime);

-- rand64 is uncompressable data. Each number will take 8 bytes of bandwidth.
-- This query should execute in no less than 1.6 seconds if throttled.
INSERT INTO times SELECT now();
SELECT sum(ignore(*)) FROM (SELECT rand64() FROM remote('127.0.0.{2,3}', numbers(20000)));
INSERT INTO times SELECT now();

SELECT max(t) - min(t) >= 1 FROM timeble pl;

drop table if exists t;

create temporary table t (x UInt64, y alias x);
insert into t values (1);
select sum(x), sum(y) from t;

drop table t;
